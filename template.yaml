apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: testttt
  title: t
  description: t
spec:
  owner: user:guest
  type: service

  parameters:
    - title: Fill in some steps
      required:
        - name
        - description
        - summary
        # - repoUrl
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        description:
          title: description
          type: string
          description: Unique description of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        summary:
          title: summary
          type: string
          description: Unique summary of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        # repoUrl:
        #   title: Repository Location
        #   type: string
        #   ui:field: RepoUrlPicker
        #   ui:options:
        #     allowedHosts:
        #       - github.com


  steps:
    # - id: fetchBase
    #   name: Fetch Base
    #   action: fetch:template
    #   input:
    #     url: ./content
    #     values:
    #       name: ${{ parameters.name }}
    # - id: publish
    #   name: Publish
    #   action: publish:github
    #   input:
    #     allowedHosts: ['github.com']
    #     description: This is ${{ parameters.name }}
    #     repoUrl: ${{ parameters.repoUrl }}
    #     repoVisibility: public
    #     defaultBranch: main
    - id: jira
      name: jira pub
      action: jira:issue:create
      input:
        project: BACKSTAGE
        summary: ${{ parameters.summary }}
        issuetype: '10001'
        description: ${{ parameters.description }}


      

        
    # The final step is to register our new component in the catalog.
    # - id: register
    #   name: Register
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
    #     catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  # output:
  #   links:
  #     - title: Repository
  #       url: ${{ steps['publish'].output.remoteUrl }}
  #     - title: Open in catalog
  #       icon: catalog
  #       entityRef: ${{ steps['register'].output.entityRef }}
